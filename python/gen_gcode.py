# -*- coding: utf-8 -*-

def layout_model_data(model_data, x_value=110.0, y_value=110.0):
    '''move the model data center to the x_value and the y_value'''
    x_pos = []
    y_pos = []
    for vert in model_data:
        x_pos.append(vert[0])
        y_pos.append(vert[1])

    center_x = (max(x_pos) - min(x_pos))*0.5
    center_y = (max(y_pos) - min(y_pos))*0.5

    for vert in model_data:
        vert[0] = vert[0] - center_x + x_value
        vert[1] = vert[1] - center_y + y_value

# convert the path to the gcode list
def generate_gcode(path, nozzle_diameter=0.4, layer_thickness=0.3,
                   center_x=110.0, center_y=110.0, precision=6):
    '''generate a gcode list from path'''
    gcode = ['; Generated by suCAM']
    if len(path) <= 2:
        return gcode

    no_value = -9999.0
    extrude_len = 0.0
    total_len = 0.0
    # uses the first vert to init it
    prev_vert = [path[0][0], path[0][1], path[0][2]]
    model_data = []

    for vert in path:
        current_vert = [vert[0], vert[1], vert[2]]
        if len(current_vert) != 3:
            return

        if current_vert[2] == prev_vert[2]:
            distance = pow(pow(
                current_vert[0] - prev_vert[0], 2) + pow(current_vert[1] - prev_vert[1], 2), 0.5)
            extrude_len = layer_thickness * nozzle_diameter * distance / 2.405
        else:
            extrude_len = 0.0
        total_len += extrude_len
        current_vert.append(total_len)

        model_data.append(current_vert)
        prev_vert = current_vert

    layout_model_data(model_data, center_x, center_y)

    prev_vert = model_data[0]
    for vert in model_data:
        gcode_line = 'G1'
        x_param = ' X' + str(round(vert[0], precision))
        y_param = ' Y' + str(round(vert[1], precision))
        z_param = ' Z' + str(round(vert[2], precision))
        e_param = ''
        if len(vert) == 4:
            if vert[3] == 0 or vert[3] <= no_value or vert[3] == prev_vert[3]:
                gcode_line = 'G0'
            else:
                e_param = ' E' + str(round(vert[3], precision))
        f_param = ' F' + '1800'

        gcode_line = gcode_line + x_param + y_param + z_param + e_param + f_param
        gcode.append(gcode_line)
        prev_vert = vert

    return gcode
